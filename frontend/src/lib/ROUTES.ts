/* eslint-disable */
/**
 * This file was generated by 'vite-plugin-kit-routes'
 *
 *      >> DO NOT EDIT THIS FILE MANUALLY <<
 */

/**
 * PAGES
 */
const PAGES = {
  "/": `/`,
  "/app": `/app`,
  "/app/galerie": `/app/galerie`,
  "/app/galerie/[eventID]": (params: { eventID: (string | number) }) => {
    return `/app/galerie/${params.eventID}`
  },
  "/app/messages": `/app/messages`,
  "/app/messages/[id]": (params: { id: (string | number) }) => {
    return `/app/messages/${params.id}`
  },
  "/app/messages/conversations": `/app/messages/conversations`,
  "/app/profile": `/app/profile`,
  "/app/profile/about": `/app/profile/about`,
  "/app/profile/confidential-policy": `/app/profile/confidential-policy`,
  "/app/profile/image-right-consent-form": `/app/profile/image-right-consent-form`,
  "/app/profile/notifications": `/app/profile/notifications`,
  "/app/profile/parameters": `/app/profile/parameters`,
  "/app/profile/parameters/login-and-security": `/app/profile/parameters/login-and-security`,
  "/app/profile/parameters/notifications": `/app/profile/parameters/notifications`,
  "/app/profile/personal-information": `/app/profile/personal-information`,
  "/app/profile/service-condition": `/app/profile/service-condition`,
  "/app/profile/user-profile": `/app/profile/user-profile`,
  "/app/reservations": `/app/reservations`,
  "/app/reservations/consultations": `/app/reservations/consultations`,
  "/app/reservations/events/[id]": (params: { id: (string | number) }) => {
    return `/app/reservations/events/${params.id}`
  },
  "/app/reservations/events/book": `/app/reservations/events/book`,
  "/app/reservations/events/galerie": `/app/reservations/events/galerie`,
  "/app/reservations/events/galerie/[eventID]": (params: { eventID: (string | number) }) => {
    return `/app/reservations/events/galerie/${params.eventID}`
  },
  "/app/services": `/app/services`,
  "/app/users": `/app/users`,
  "/signup": `/signup`,
  "/signup/address": `/signup/address`,
  "/signup/general": `/signup/general`,
  "/signup/password": `/signup/password`,
  "/signup/pending": `/signup/pending`,
  "/signup/verify-email": `/signup/verify-email`,
  "/soon": `/soon`,
  "/verify-email": `/verify-email`
}

/**
 * SERVERS
 */
const SERVERS = {
  "GET /oauth/google": `/oauth/google`,
  "GET /oauth/google/callback": `/oauth/google/callback`,
  "GET /test": `/test`
}

/**
 * ACTIONS
 */
const ACTIONS = {
  
}

/**
 * LINKS
 */
const LINKS = {
  
}

type ParamValue = string | number | undefined

/**
 * Append search params to a string
 */
export const appendSp = (sp?: Record<string, ParamValue | ParamValue[]>, prefix: '?' | '&' = '?') => {
  if (sp === undefined) return ''

  const params = new URLSearchParams()
  const append = (n: string, v: ParamValue) => {
    if (v !== undefined) {
      params.append(n, String(v))
    }
  }

  for (const [name, val] of Object.entries(sp)) {
    if (Array.isArray(val)) {
      for (const v of val) {
        append(name, v)
      }
    } else {
      append(name, val)
    }
  }

  const formatted = params.toString()
  if (formatted) {
    return `${prefix}${formatted}`
  }
  return ''
}

/**
 * get the current search params
 * 
 * Could be use like this:
 * ```
 * route("/cities", { page: 2 }, { ...currentSP() })
 * ```
 */ 
export const currentSp = () => {
  const params = new URLSearchParams(window.location.search)
  const record: Record<string, string> = {}
  for (const [key, value] of params.entries()) {
    record[key] = value
  }
  return record
}

// route function helpers
type NonFunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T]
type FunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T]
type FunctionParams<T> = T extends (...args: infer P) => any ? P : never

const AllObjs = { ...PAGES, ...ACTIONS, ...SERVERS, ...LINKS }
type AllTypes = typeof AllObjs

export type Routes = keyof AllTypes extends `${string}/${infer Route}` ? `/${Route}` : keyof AllTypes
export const routes = [
	...new Set(Object.keys(AllObjs).map((route) => /^\/.*|[^ ]?\/.*$/.exec(route)?.[0] ?? route)),
] as Routes[]

/**
 * To be used like this: 
 * ```ts
 * import { route } from './ROUTES'
 * 
 * route('site_id', { id: 1 })
 * ```
 */
export function route<T extends FunctionKeys<AllTypes>>(key: T, ...params: FunctionParams<AllTypes[T]>): string
export function route<T extends NonFunctionKeys<AllTypes>>(key: T): string
export function route<T extends keyof AllTypes>(key: T, ...params: any[]): string {
  if (AllObjs[key] as any instanceof Function) {
    const element = (AllObjs as any)[key] as (...args: any[]) => string
    return element(...params)
  } else {
    return AllObjs[key] as string
  }
}

/**
* Add this type as a generic of the vite plugin `kitRoutes<KIT_ROUTES>`.
*
* Full example:
* ```ts
* import type { KIT_ROUTES } from './ROUTES'
* import { kitRoutes } from 'vite-plugin-kit-routes'
*
* kitRoutes<KIT_ROUTES>({
*  PAGES: {
*    // here, key of object will be typed!
*  }
* })
* ```
*/
export type KIT_ROUTES = {
  PAGES: { '/': never, '/app': never, '/app/galerie': never, '/app/galerie/[eventID]': 'eventID', '/app/messages': never, '/app/messages/[id]': 'id', '/app/messages/conversations': never, '/app/profile': never, '/app/profile/about': never, '/app/profile/confidential-policy': never, '/app/profile/image-right-consent-form': never, '/app/profile/notifications': never, '/app/profile/parameters': never, '/app/profile/parameters/login-and-security': never, '/app/profile/parameters/notifications': never, '/app/profile/personal-information': never, '/app/profile/service-condition': never, '/app/profile/user-profile': never, '/app/reservations': never, '/app/reservations/consultations': never, '/app/reservations/events/[id]': 'id', '/app/reservations/events/book': never, '/app/reservations/events/galerie': never, '/app/reservations/events/galerie/[eventID]': 'eventID', '/app/services': never, '/app/users': never, '/signup': never, '/signup/address': never, '/signup/general': never, '/signup/password': never, '/signup/pending': never, '/signup/verify-email': never, '/soon': never, '/verify-email': never }
  SERVERS: { 'GET /oauth/google': never, 'GET /oauth/google/callback': never, 'GET /test': never }
  ACTIONS: Record<string, never>
  LINKS: Record<string, never>
  Params: { eventID: never, id: never }
}
