version: "3.8"

services:
  frontend: 
    depends_on:
      - backend
    image: frontend:test
    container_name: frontend
    environment:
      ORIGIN: "${ORIGIN:-http://localhost:3000}"
    restart: unless-stopped
    user: node
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - frontend-network
      - backend-network
    cap_drop:
      - ALL

  backend:
    depends_on:
      - redis
    image: backend:test
    container_name: backend
    user: appuser
    ports:
      - "127.0.0.1:3500:3500"
    networks:
      - backend-network
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

    environment:
      - APP_ENV=production

      - AWS_REGION
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY

      - GMAIL_EMAIL
      - GMAIL_PASSWORD

      - STRIPE_SECRET_KEY

      - REDIS_ADDR
      - REDIS_DB
      - REDIS_PASSWORD

      - FRONTEND_ORIGIN
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3500/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:latest
    container_name: session-manager
    user: redis
    command: redis-server --requirepass secret
    ports:
      - 6379:6379
    networks:
      - backend-network
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  frontend-network:
  backend-network:
