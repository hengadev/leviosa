name: üöÄ Deploy application
description: This action deploys the application by pulling the latest Docker images from the container registry, removing existing containers, and starting the services. It also includes health checks and cleanup of unused resources.

inputs:
  filter:
    description: Container name filter pattern to identify and remove existing containers (e.g., 'staging' or 'prod')
    required: true
  dockerhub_username:
    description: Docker Hub account username for authentication
    required: true
  dockerhub_token: 
    description: Docker Hub access token for authentication
    required: true
  app_env:
    description: Application environment (e.g., 'staging' or 'production')
    required: true
  backend_port:
    description: 'Port number for backend service'
    required: true
  port:
    description: 'Port number for frontend service'
    required: true
  aws_region:
    description: AWS region for service deployment
    required: true
  aws_access_key_id:
    description: AWS access key ID for authentication
    required: true
  aws_secret_access_key:
    description: AWS secret access key for authentication
    required: true
  bucketname:
    description: Name of the S3 bucket for storing application data
    required: true
  stripe_secret_key:
    description: Stripe API secret key for payment processing
    required: true
  gmail_email:
    description: Gmail address for sending application emails
    required: true
  gmail_password:
    description: Gmail application-specific password for authentication
    required: true
  google_client_id:
    description: Google OAuth client ID for authentication
    required: true
  google_client_secret:
    description: Google OAuth client secret for authentication
    required: true
  redis_addr:
    description: Redis server address for caching
    required: true
  redis_password:
    description: Redis password for authentication
    required: true
  redis_db:
    description: Redis database number to use
    required: true
  user_encryption_key:
    description: Key used for encrypting user data
    required: true
  logging_salt:
    description: Salt used for logging purposes
    required: true

runs:
  using: 'composite'
  steps:
    - name: ‚¨áÔ∏è Checkout repo
      uses: actions/checkout@v4.1.1
    - name: Install docker-compose
      uses: KengoTODA/actions-setup-docker-compose@v1
      with:
        version: '1.29.2'
    - name: üîë Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_token }}
    - name: üßπ Remove existing containers
      shell: bash
      run: |
        echo "Cleaning up existing containers matching ${{ inputs.filter }}"
        existing_containers=$(docker ps -aq --filter "name=${{ inputs.filter }}")
        if [ ! -z "$existing_containers" ]; then
          docker rm -f $existing_containers
        fi
    - name: üöÄ Deploy application
      shell: bash
      env:
        APP_ENV: ${{ inputs.app_env }}
        BACKEND_PORT: ${{ inputs.backend_port }}
        PORT: ${{ inputs.port }}
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        BUCKETNAME: ${{ inputs.bucketname }}
        STRIPE_SECRET_KEY: ${{ inputs.stripe_secret_key }}
        GMAIL_EMAIL: ${{ inputs.gmail_email }}
        GMAIL_PASSWORD: ${{ inputs.gmail_password }}
        GOOGLE_CLIENT_ID: ${{ inputs.google_client_id }}
        GOOGLE_CLIENT_SECRET: ${{ inputs.google_client_secret }}
        REDIS_ADDR: ${{ inputs.redis_addr }}
        REDIS_PASSWORD: ${{ inputs.redis_password }}
        REDIS_DB: ${{ inputs.redis_db }}
        USER_ENCRYPTION_KEY: ${{ inputs.user_encryption_key }}
        LOGGING_SALT: ${{ inputs.logging_salt }}

      run: |
        {
          echo "=== Deployment started at $(date) ==="
          
          echo "Pulling latest images..."
          docker pull henga/leviosa:${{ inputs.app_env }}-frontend
          docker pull henga/leviosa:${{ inputs.app_env }}-backend

          echo "Starting services..."
          docker compose up -d --force-recreate
          
          echo "Waiting for services to be healthy..."
          attempt_counter=0
          max_attempts=12  # 2 minutes total (12 * 10 seconds)
          
        until curl --output /dev/null --silent --fail http://localhost:${{ inputs.port }}/healthz; do

            if [ ${attempt_counter} -eq ${max_attempts} ]; then
              echo "ERROR: Application failed to become healthy after 2 minutes"
              docker compose logs
              exit 1
            fi
            
            attempt_counter=$(($attempt_counter+1))
            echo "Waiting for application to be ready... (${attempt_counter}/${max_attempts})"
            sleep 20

          done
          
          echo "Application is healthy!"
          
          echo "Cleaning up unused resources..."

          echo "Remove stopped containers older than 24h"
          docker container prune --force --filter "until=24h"
          echo "Remove dangling images (those with <none> tags)"
          docker image prune --force
          echo "Optionally, remove all unused images older than 24h"
          docker image prune --all --force --filter "until=24h"

          
          echo "=== Deployment completed successfully at $(date) ==="
        } 2>&1 | tee -a ${{ env.DEPLOY_LOG }}
        
        # Check if the deployment was successful
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          echo "Deployment failed! Check logs at ${{ env.DEPLOY_LOG }}"
          exit 1
        fi

    - name: üìß Notify on failure
      if: failure()
      shell: bash
      run: |
        echo "Deployment failed! Logs available at ${{ env.DEPLOY_LOG }}"
        # can add additional notification methods here (email, Slack, etc.)
